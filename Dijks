void djs(vector<vector<pair<int, int>>>& arr, int st, vector<ll>& costs) {
	vector<bool> visited(arr.size(), 0);

	priority_queue<pairil, vector<pairil>, greater<pairil>> q;  //min cost first
	q.push({ 0,st });
	costs[st] = 0;

	while (q.empty() == false) {
		pairil temp = q.top();
		q.pop();

		ll val = temp.first;
		int node = temp.second;

		if (visited[node] == 1) continue;

		// cout<<node + 1<<endl;

		visited[node] = 1;
		for (auto i : arr[node]) {
			if (visited[i.first] == 0) {
				if (costs[i.first] == -1) {
					costs[i.first] = i.second + val;
				}
				else {
					costs[i.first] = min(costs[i.first], (ll)i.second + val);
				}
				q.push({ costs[i.first],i.first });
			}
		}
	}
}
