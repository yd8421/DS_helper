int partition (int arr[], int ind[] int low, int high)
{
    int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
 
    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
            swap(&ind[i], &ind[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    swap(&ind[i + 1], &ind[high]);
    return (i + 1);
}

void quickSort(int arr[], int ind[] int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
        at right place */
        int pi = partition(arr, ind, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, ind, low, pi - 1);
        quickSort(arr, ind, pi + 1, high);
    }
}
